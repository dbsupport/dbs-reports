<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.1.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />
	
	<!-- Scans the classpath for annotated components that will be auto-registered as Spring beans.
 	For example @Controller and @Service. Make sure to set the correct base-package-->	
	<context:component-scan base-package="pl.com.dbs.reports" />
	
	 <!-- the mvc resources tag does the magic -->
	 <!-- to samo tez w web-security-context.xml -->
	 <mvc:resources mapping="/css/**" location="/css/" />
	 <mvc:resources mapping="/js/**" location="/js/" />
	 <mvc:resources mapping="/img/**" location="/img/" />
	 <mvc:resources mapping="/font/**" location="/font/" />
	
	
	<!-- Configures the annotation-driven Spring MVC Controller programming model.
	Note that, with Spring 3.0, this tag works in Servlet MVC only!  -->	
 	<tx:annotation-driven />
     
    <!-- tiles -->
	<!-- Helper class to configure Tiles 2.x for the Spring Framework -->
	<!-- See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesConfigurer.html -->
	<!-- The actual tiles templates are in the tiles-definitions.xml -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/config/tiles-definitions.xml</value>
			</list>
		</property>
	</bean>
	 
	<!-- Convenience subclass of UrlBasedViewResolver that supports TilesView (i.e. Tiles definitions) and custom subclasses of it. -->
	<!-- Don't forget to set the order if you declared other ViewResolvers -->
	<!-- See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesViewResolver.html  -->
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
    	<property name="order" value="0" />
    </bean>
  
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
	    <property name="suffix" value=".jsp" />
	    <property name="order" value="1" />
    </bean>
    	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="basenames">
			<list>
        		<value>classpath:/web</value>
        		<value>classpath:/app</value>
        	</list>
    	</property>
    </bean>  
    
	<mvc:annotation-driven/>
	<!--  validator="globalValidator"/-->
	<!-- bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/-->
	
</beans>
